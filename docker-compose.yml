version: "3.8"

services:
  # Seus serviços existentes
  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  postgres:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: api1db
      POSTGRES_USER: api1user
      POSTGRES_PASSWORD: api1password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  orchard_api:
    build:
      context: ./teste
      dockerfile: Dockerfile
    container_name: orchard_api
    restart: unless-stopped
    environment:
      MONGODB_URI: "mongodb://mongo:27017/orchard_db"
      PORT: 4000
      RABBITMQ_URL: "amqp://rabbitmq"
    ports:
      - "4000:4000"
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - app-network

  api1:
    build:
      context: ./advanced-topics
      dockerfile: Dockerfile
    container_name: api1-app
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/api1db
      SPRING_DATASOURCE_USERNAME: api1user
      SPRING_DATASOURCE_PASSWORD: api1password
    depends_on:
      - mongo
      - rabbitmq
      - postgres
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - orchard_api
    networks:
      - app-network

  # Jenkins com Docker integrado
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins-ci
    restart: unless-stopped
    ports:
      - "8090:8080"  # Mudei para 8090 para não conflitar com api1
      - "50001:50000"  # Mudei para 50001 para evitar conflito
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/workspace  # Monta o código fonte
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - JENKINS_OPTS=--httpPort=8080
    user: root  # Necessário para acessar docker.sock
    networks:
      - app-network
    depends_on:
      - mongo
      - rabbitmq
      - postgres

volumes:
  mongo_data:
  rabbitmq_data:
  postgres_data:
  jenkins_home:

networks:
  app-network:
    driver: bridge

    