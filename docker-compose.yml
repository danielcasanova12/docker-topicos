version: "3.8"

services:
  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  orchard_api:
    build:
      context: ./teste
      dockerfile: Dockerfile
    container_name: orchard_api
    restart: unless-stopped
    environment:
      MONGODB_URI: "mongodb://mongo:27017/orchard_db"
      PORT: 4000
      RABBITMQ_URL: "amqp://rabbitmq"
    ports:
      - "4000:4000"
    depends_on:
      - mongo
      - rabbitmq

  api1:
    build:
      context: ./advanced-topics
      dockerfile: Dockerfile
    container_name: api1-app
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
    depends_on:
      - mongo
      - rabbitmq
      - postgres # Adicionado dependência do PostgreSQL

  postgres:
    image: postgres:13 # Usando uma imagem PostgreSQL estável
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: api1db # Nome do banco de dados
      POSTGRES_USER: api1user # Usuário do banco de dados
      POSTGRES_PASSWORD: api1password # Senha do banco de dados
    ports:
      - "5432:5432" # Porta padrão do PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume para persistir os dados

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - orchard_api

volumes:
  mongo_data:
  rabbitmq_data:
  postgres_data: # Adicionado volume para o PostgreSQL
